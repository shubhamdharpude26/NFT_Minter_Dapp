{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","Login.js","Main.js","App.js","index.js"],"names":["initialState","loading","account","smartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","name","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","getState","methods","call","console","log","connectFailed","updateAccount","Login","useDispatch","useSelector","useState","useEffect","className","onClick","e","preventDefault","window","ethereum","isMetaMask","Web3","request","method","accounts","networkId","SmartContractObj","eth","Contract","SmartContract","on","location","reload","class","src","alt","swal","Main","tmp2","feedback","setfeedback","claimingNft","setClamingNft","placeholder","id","disabled","_amount","tmp","document","getElementById","value","save","mint","send","from","utils","toWei","toString","once","err","then","receipt","href","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.e3abadb1.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  name: \"\",\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...initialState,\n        loading: false,\n        name: action.payload.name,\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          name,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// constants\nimport Web3 from \"web3\";\nimport SmartContract from \"../../contracts/NCC.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version',\n        });\n        console.log(networkId);\n        \n        // const NetworkData = await SmartContract.networks[networkId];\n        if (networkId == 80001) {\n          const SmartContractObj = new web3.eth.Contract(\n            SmartContract,\n            \"0x317a2CC964a3c4f2D66D624EA52362156b5c178a\"\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        console.log(err);\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {connect} from \"./redux/blockchain/blockchainActions.js\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport swal from 'sweetalert';\n\nfunction Login() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [feedback, setfeedback] = useState(\"May be it's your lucky day!\");\n  const [claimingNft, setClamingNft] = useState(false);\n\n  const claimNfts = (_amount) => {\n    setClamingNft(true);\n    blockchain.smartContract.methods\n      .mint(blockchain.account, _amount)\n      .send({\n        from: blockchain.account,\n        value: blockchain.web3.utils.toWei(\n          (0.02 * _amount).toString(),\n          \"ether\"\n        ),\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setfeedback(\"Error\");\n        setClamingNft(false);\n      })\n      .then((receipt) => {\n        setfeedback(\"Success\");\n        setClamingNft(false);\n      });\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  })\n \n  function onSuccess() {\n    console.log(blockchain);\n    swal('Success', \" \", \"success\");\n  }\n\n  function onError() {\n    swal(\"Error\", \"Connect to polygon network only!\", \"error\");\n  }\n\n  return (\n    <div className=\"h-screen px-64  bg-gradient-to-b from-pink-300 to-purple-500 flex flex-col box-border\">\n      <div className=\"bg-red-500 text-white rounded-b-2xl w-28 h-24 font-semibold relative flex justify-center items-center\">\n        NFT MINTER\n      </div>\n      <div className=\"mt-24 justify-center items-center \">\n        <div className=\"grid sm:grid-cols-1 xl:grid-cols-2  gap-2 bg-white shadow-lg sm:rounded-3xl sm:p-20 bg-clip-padding bg-opacity-30 border border-gray-200\">\n          <div className=\"my-18 mr-24 ml-9 px-10 py-8 box-border\">\n            <p className=\"text-5xl mb-3 font-montserrat font-semibold text-gray-700\">\n              Connect MetaMask Wallet\n            </p>\n            <button onClick={(e) => {\n                    e.preventDefault();\n                    dispatch(connect());\n                  }}\n              class=\"bg-red-500 shadow-lg shadow-red-500/50 text-white rounded-md my-4 px-16 py-2\"\n            >\n              MATIC\n            </button>\n          </div>\n          <div className=\"flex justify-center items-center h-auto\">\n            <img\n              src=\"https://github.com/shubhamdharpude26/generative-art-opensource/blob/v4/output/metamask.png?raw=true\"\n              className=\"w-64\"\n              alt=\"...\"\n            />\n          </div>\n          {blockchain.errorMsg !== \"\" ? (\n            onError()\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect, useState } from \"react\";\nimport swal from \"sweetalert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nfunction Main() {\n  const blockchain = useSelector((state) => state.blockchain);\n  const dispatch = useDispatch();\n  const [feedback, setfeedback] = useState(\"May be it's your lucky day!\");\n  // const [input, setInput] = useState(0);\n  const [claimingNft, setClamingNft] = useState(false);\n  var tmp2;\n\n  const claimNfts = (_amount) => {\n    setClamingNft(true);\n    blockchain.smartContract.methods\n      .mint(blockchain.account, _amount)\n      .send({\n        from: blockchain.account,\n        value: blockchain.web3.utils.toWei(\n          (0.02 * _amount).toString(),\n          \"ether\"\n        ),\n      })\n      .once(\"error\", (err) => {\n        console.log(err);\n        setfeedback(\"Error\");\n        setClamingNft(false);\n      })\n      .then((receipt) => {\n        setfeedback(\"Success\");\n        setClamingNft(false);\n      });\n  };\n\n  function onSuccess() {\n    console.log(blockchain);\n    swal(\"Success\", \" \", \"success\");\n  }\n\n  function save() {\n    var tmp = document.getElementById(\"custom-css-outlined-input\");\n    tmp2 = tmp.value;\n    // alert(tmp1);\n    // setInput(tmp1);\n  }\n\n  return (\n    <div className=\"bg-gradient-to-b from-pink-300 to-purple-500\">\n      <div className=\"h-screen px-64 bg-hero-pattern bg-auto bg-no-repeat flex flex-col justify-start\">\n        {/* <img src=\"/src/vectorArt.svg\" alt=\"\" /> */}\n        <div className=\"bg-red-500 text-white rounded-b-2xl w-28 h-24 font-semibold flex justify-center items-center\">\n          NFT MINTER\n        </div>\n        <div className=\"mt-24 w-3/5\">\n          <div className=\"bg-white shadow-lg sm:rounded-3xl bg-opacity-30 backdrop-blur-md border border-white pb-8 pl-8\">\n            <div className=\"my-18 mr-60 ml-9 pt-9\">\n              <p className=\"text-3xl mb-3 font-montserrat font-semibold text-white\">\n                Grab a NFT for{\" \"}\n                <span className=\"text-gray-700\">0.02 MATIC</span> before they\n                are gone!\n              </p>\n            </div>\n            <div className=\" mr-64 ml-9\">\n              <p className=\"text-base mb-3 font-montserrat font-semibold text-neutral-500\">\n              {feedback}\n              </p>\n            </div>\n            <div className=\"mr-64 ml-9\">\n              <input\n                class=\"placeholder:italic shadow-xl shadow-red-500/30 placeholder:text-slate-400 block bg-white border-red-300 border-2 rounded-md py-2 pl-4 pr-4 shadow-sm focus:outline-none focus:border-red-300 focus:ring-red-400 focus:ring-1 sm:text-sm w-full\"\n                placeholder=\"Enter no. of NFT to Buy\"\n                type=\"text\"\n                id=\"custom-css-outlined-input\"\n              />\n              <button\n                class=\"bg-red-500 shadow-lg shadow-red-500/50 text-white rounded-md my-6 py-2 w-5/12\"\n                type=\"submit\"\n                disabled={claimingNft ? 1 : 0}\n                onClick={(e) => {\n                  e.preventDefault();\n                  save();\n                  // alert(tmp2);\n                  claimNfts(tmp2);\n                }}\n              >\n                {claimingNft ? \"Busy Claiming\" : \"Claim NFT\"}\n              </button>\n            </div>\n            <div className=\"mr-64 ml-9 text-blue-800\">\n              <a href=\"https://testnets.opensea.io/collection/teamnftminter-v2\">Visit OpenSea Market Place</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport Login from \"./Login\";\nimport Main from \"./Main\";\nimport { useSelector } from \"react-redux\";\n\nfunction App() {\n  const blockchain = useSelector((state) => state.blockchain);\n  return (\n    <div>\n      {blockchain.account === \"\" || blockchain.smartContract === null ? (\n        <Login />\n      ) : (\n        <Main />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css'\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}